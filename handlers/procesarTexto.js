const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const { sendMessage } = require('../utils/sendMessage');
const { sendPdf, generarPdfDesdeApi2Pdf } = require('../utils/pdf');
const { guardarConversacionEnWix, obtenerConversacionDeWix } = require('../utils/wixAPI');
const { consultarInformacionPaciente } = require('../utils/consultarPaciente');
const { marcarPagado } = require('../utils/marcarPagado');
const { esCedula, contieneTexto } = require('../utils/validaciones');

// üÜï Prompt mejorado actualizado
const promptInstitucional = `
Eres el asistente virtual de ex√°menes m√©dicos ocupacionales para BSL en Colombia. Tu tarea es responder en frases cortas, claras y sin tecnicismos. La mayor√≠a de los usuarios tienen baja alfabetizaci√≥n.

üéØ TU ROL:
- Responde solo sobre ex√°menes m√©dicos de BSL.
- Si preguntan por su cita, pide n√∫mero de documento si no lo tienes.
- Saluda o despide si el usuario lo hace, siempre como BSL.
- Para descargar el certificado, primero env√≠a el soporte de pago por este medio.
- Si pide un asesor o no entiendes, responde exactamente: "...transfiriendo con asesor" (sin punto final). Eso detiene el bot.

üìã SERVICIOS:

1. **Ex√°menes Ocupacionales**
   - **Virtual**: $46.000 COP  
     - Agenda tu hora
     - Pruebas en l√≠nea
     - M√©dico te contacta
     - Pagas y descargas el certificado al instante
     - Incluye: M√©dico osteomuscular, audiometr√≠a, optometr√≠a
     - Link: https://www.bsl.com.co/nuevaorden-1 
     - Horario: 7am a 7pm, todos los d√≠as

   - **Presencial**: $69.000 COP  
     - Calle 134 No. 7-83, Bogot√°
     - Lunes a viernes 7:30am-4:30pm | S√°bados 8am-11:30am
     - No requiere agendar, es por orden de llegada
     - Incluye lo mismo que el virtual

2. **Pagos**
   - Bancolombia: Ahorros 44291192456 (c√©dula 79981585)
   - Daviplata: 3014400818 (Mar Rea)
   - Nequi: 3008021701 (Dan Tal)
   - Tambi√©n Transfiya

3. **Extras opcionales**
   - Cardiovascular, Vascular, Espirometr√≠a, Dermatol√≥gico: $5.000 c/u
   - Psicol√≥gico: $15.000
   - Perfil lip√≠dico: $60.000
   - Glicemia: $20.000

üìå INDICACIONES IMPORTANTES:
- Si requiere perfil lip√≠dico o glicemia, puede hacer el examen virtual y adjuntar los laboratorios despu√©s.
- Si tiene ex√°menes de laboratorio realizados (incluso en otro laboratorio) puede adjuntarlos
- Prueba psicosensom√©trica solo presencial (si es para conductores) de lo contrario es virtual
- Para descargar el certificado, primero env√≠a el soporte de pago por este medio.
- El proceso es secuencial: agenda ‚Üí pruebas virtuales ‚Üí consulta m√©dica ‚Üí revisi√≥n y aprobaci√≥n de certificado ‚Üí pago.
- Nunca muestres medios de pago ni los solicites antes de que el usuario haya revisado y aprobado el certificado.
- Si el usuario pregunta por pago preg√∫ntale: ¬øYa revisaste el certificado? y si responde que si env√≠ale los datos para el pago.
- Usa respuestas cortas (m√°x 2 l√≠neas) y vi√±etas si hay varios puntos.
- Todo el proceso dura 25 minutos las pruebas virtuales y 10 minutos la consulta m√©dica

‚Ä¢ Si ya enviaste el certificado, **NO vuelvas a enviarlo** a menos que el usuario lo pida expl√≠citamente.
‚Ä¢ Si pregunta por precios, horarios, c√≥mo agendar u otra info general tras recibir el certificado, responde normalmente.
‚Ä¢ Si el usuario pide el certificado expl√≠citamente ("certificado", "pdf", "descargar"), puedes volver a enviarlo.
‚Ä¢ Responde siempre con base en el historial de la conversaci√≥n.

üìå INTENCIONES:
- Si pregunta c√≥mo hacer un examen, quiere info general o necesita orientaci√≥n, responde as√≠:
  "ü©∫ Nuestras opciones:
   Virtual ‚Äì $46.000 COP
   Presencial ‚Äì $69.000 COP"
- Solo entrega los detalles completos si responde "virtual", "presencial", "el de 46", "el de 69", etc.
- Si pregunta por cita resp√≥ndele que en el link de agendamiento est√°n los turnos disponibles 
- Si ya agend√≥ la cita y necesita confirmar su horario resp√≥ndele:
  "Claro, para ayudarte necesito tu n√∫mero de documento. Por favor escr√≠belo."

üîó MENSAJES DEL ADMINISTRADOR:
- Si un ADMINISTRADOR dio info o instrucciones √∫tiles, √∫salas como contexto.
- Si pregunta "¬øqu√© me falta terminar?", "¬øqu√© hago ahora?", etc., explica lo que el ADMIN indic√≥.
- Solo transfiere con asesor si no tienes informaci√≥n suficiente o el usuario lo pide.

üîí TEMAS NO PERMITIDOS:
- Si pregunta por otros temas ajenos a BSL, responde que solo atiendes servicios m√©dicos de BSL.
- No uses formato tipo [texto](url); escribe los enlaces directo.
- Resume respuestas en vi√±etas si hay varios puntos.
`;

// üÜï Clasificador mejorado para trabajar mejor con im√°genes y contexto
const promptClasificador = `
Eres un clasificador experto de intenciones para un asistente m√©dico. Analiza el contexto completo de la conversaci√≥n para determinar qu√© necesita el usuario.

CONTEXTO A CONSIDERAR:
- Si el usuario envi√≥ im√°genes recientemente (comprobantes, confirmaciones, etc.)
- Si ya existe una c√©dula en el historial
- Si hay mensajes del administrador
- El flujo natural de la conversaci√≥n

OPCIONES DE CLASIFICACI√ìN (responde SOLO la etiqueta):

1. **confirmar_cita** - Cuando el usuario:
   - Pregunta por fecha/hora de su cita
   - Envi√≥ confirmaci√≥n de cita + quiere info
   - Dice "cu√°ndo es mi cita", "qu√© d√≠a tengo cita"

2. **solicitar_certificado** - Cuando el usuario:
   - Envi√≥ comprobante de pago + quiere certificado
   - Pregunta por su certificado despu√©s de pagar
   - Dice "mi certificado", "pdf", "descargar"

3. **aprobar_certificado** - Cuando el usuario:
   - Responde "s√≠", "apruebo", "est√° bien", "correcto"
   - El admin pregunt√≥ por aprobaci√≥n antes
   - Confirma que est√° de acuerdo con algo

4. **consulta_general** - Cuando el usuario:
   - Pregunta precios, horarios, servicios
   - Quiere informaci√≥n sobre ex√°menes
   - Saluda o se presenta

5. **sin_intencion_clara** - Cuando:
   - No puedes determinar qu√© necesita
   - El mensaje es ambiguo o incompleto

REGLAS ESPECIALES:
- Im√°genes + c√©dula = infer intenci√≥n del tipo de imagen
- Admin pidi√≥ algo = considerar respuesta del usuario
- Solo texto sin contexto = clasificar por palabras clave

Responde √∫nicamente con UNA de las 5 etiquetas anteriores.
`;

// Funci√≥n de utilidad para evitar mensajes duplicados
function limpiarDuplicados(historial) {
    const vistos = new Set();
    return historial.filter(m => {
        const clave = `${m.from}|${m.mensaje}`;
        if (vistos.has(clave)) return false;
        vistos.add(clave);
        return true;
    });
}

// Nueva funci√≥n para evitar que se repita el env√≠o del certificado
function yaSeEntregoCertificado(historial) {
    return historial.slice(-5).some(m =>
        m.from === "sistema" &&
        (
            m.mensaje.includes("PDF generado y enviado correctamente.") ||
            m.mensaje.includes("Aqu√≠ tienes tu certificado m√©dico en PDF")
        )
    );
}

    // üÜï Funci√≥n mejorada para detectar el contexto de la conversaci√≥n
function detectarContextoConversacion(historial) {
    const ultimosMessages = historial.slice(-15); // M√°s contexto
  
    // Buscar si hay un comprobante de pago en el historial reciente
    const hayComprobantePago = ultimosMessages.some(m =>
        m.mensaje.includes("üì∑ Comprobante de pago recibido") ||
        m.mensaje.includes("Comprobante de pago recibido") ||
        m.mensaje.includes("valor detectado") ||
        m.mensaje.includes("Valor detectado") ||
        m.mensaje.includes("Hemos recibido tu comprobante") ||
        m.mensaje.includes("comprobante_pago")
    );
  
    // üÜï SOLO considerar confirmaci√≥n de cita si REALMENTE hubo una imagen
    const hayConfirmacionCita = ultimosMessages.some(m =>
        (m.mensaje.includes("üìÖ Confirmaci√≥n de cita recibida") ||
         m.mensaje.includes("Confirmaci√≥n de cita recibida")) &&
        // Verificar que realmente vino de procesamiento de imagen
        m.from === "sistema"
    );
  
    // Buscar si hay un listado de ex√°menes  
    const hayListadoExamenes = ultimosMessages.some(m =>
        m.mensaje.includes("üìã Listado de ex√°menes recibido") ||
        m.mensaje.includes("Listado de ex√°menes recibido") ||
        m.mensaje.includes("orden m√©dica") ||
        m.mensaje.includes("listado_examenes")
    );

    // üÜï Detectar si ya se consult√≥ informaci√≥n recientemente
    const yaSeConsultoInfo = ultimosMessages.some(m =>
        m.mensaje.includes("üìÑ Informaci√≥n registrada:") ||
        m.mensaje.includes("Informaci√≥n registrada:")
    );

    return {
        hayComprobantePago,
        hayConfirmacionCita,
        hayListadoExamenes,
        yaSeConsultoInfo,
        contexto: hayComprobantePago ? "pago" :
                 hayConfirmacionCita ? "consulta_cita" :
                 hayListadoExamenes ? "examenes" : 
                 yaSeConsultoInfo ? "ya_consultado" : "general"
    };
}

// Funci√≥n para enviar y guardar mensaje en historial
async function enviarMensajeYGuardar({ to, userId, nombre, texto, remitente = "sistema" }) {
    if (to) { // Solo enviar si se especifica un destinatario
        await sendMessage(to, texto);
    }
    const { mensajes: historial = [] } = await obtenerConversacionDeWix(userId);
    const historialLimpio = limpiarDuplicados(historial);
    const nuevoHistorial = limpiarDuplicados([
        ...historialLimpio,
        { from: remitente, mensaje: texto }
    ]);
    await guardarConversacionEnWix({ userId, nombre, mensajes: nuevoHistorial });
}

async function eliminarConversacionDeWix(userId) {
    try {
        const resp = await fetch("https://www.bsl.com.co/_functions/eliminarConversacion", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ userId })
        });
        return await resp.json();
    } catch (err) {
        console.error("Error eliminando conversaci√≥n en Wix:", err);
        return { success: false, error: err.message };
    }
}

// üÜï Funci√≥n para marcar STOP autom√°ticamente usando tu API existente
async function marcarStopEnWix(userId) {
    try {
        const resp = await fetch("https://www.bsl.com.co/_functions/actualizarObservaciones", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, observaciones: "stop" })
        });
        
        const result = await resp.json();
        console.log(`üõë STOP marcado autom√°ticamente para usuario: ${userId}`, result);
        return { success: true };
    } catch (err) {
        console.error("Error marcando STOP en Wix:", err);
        return { success: false, error: err.message };
    }
}

// üÜï Funci√≥n para detectar si el usuario est√° haciendo una correcci√≥n
function esCorreccionDeHorario(mensaje) {
    const palabrasCorreccion = [
        "equivocada", "equivocado", "mal", "error", "incorrecto", "incorrecta",
        "debe ser", "deber√≠a ser", "es a las", "son las", "no es", "no son"
    ];
    
    return palabrasCorreccion.some(palabra => 
        mensaje.toLowerCase().includes(palabra)
    );
}

// üÜï Funci√≥n para detectar cuando el usuario quiere hablar con un asesor
function quiereAsesor(mensaje) {
    const palabrasAsesor = [
        "asesor", "persona", "humano", "ayuda", "problema", "error",
        "hablar con", "contactar", "comunicar", "equivocado", "mal"
    ];
    
    return palabrasAsesor.some(palabra => 
        mensaje.toLowerCase().includes(palabra)
    );
}
function ultimoMensajeFueVerificarDatos(historial) {
    const mensajesAdmin = historial.filter(m => m.from === "admin");
    if (mensajesAdmin.length === 0) return false;
   
    const ultimoMensajeAdmin = mensajesAdmin[mensajesAdmin.length - 1];
    const mensajesStop = [
        "Revisa que todo est√© en orden",
        "revisa que todo est√© en orden", 
        "revisa que todo este en orden",
        "Revisa que todo este en orden",
        "revisa que todo est√° en orden",
        "Revisa que todo est√° en orden"
    ];
    
    return mensajesStop.some(msg => ultimoMensajeAdmin.mensaje.toLowerCase().includes(msg.toLowerCase()));
}

async function procesarTexto(message, res) {
    const from = message.from;
    const nombre = message.from_name || "Nombre desconocido";
    const chatId = message.chat_id;
    const to = chatId || `${from}@s.whatsapp.net`;
    const userMessage = message.text.body.trim();

    // 1. Guardar el mensaje del usuario
    {
        const { mensajes: historial = [] } = await obtenerConversacionDeWix(from);
        const historialLimpio = limpiarDuplicados(historial);
        const nuevoHistorial = limpiarDuplicados([
            ...historialLimpio,
            { from: "usuario", mensaje: userMessage }
        ]);
        await guardarConversacionEnWix({ userId: from, nombre, mensajes: nuevoHistorial });
    }

    // 2. Obtener historial actualizado y limpiar duplicados
    const { mensajes: mensajesHistorial = [], observaciones = "" } = await obtenerConversacionDeWix(from);
    const historialLimpio = limpiarDuplicados(mensajesHistorial);

    console.log("üìù Historial recuperado de Wix para", from, ":", JSON.stringify(historialLimpio, null, 2));

    // --- FILTRO para evitar repetir el certificado ---
    if (yaSeEntregoCertificado(historialLimpio)) {
        await sendMessage(to, "Ya tienes tu certificado. Si necesitas otra cosa, dime por favor.");
        return res.json({ success: true, mensaje: "Certificado ya entregado." });
    }

    // 3. Verificar si el usuario est√° bloqueado
    if (String(observaciones).toLowerCase().includes("stop")) {
        return res.json({ success: true, mensaje: "Usuario bloqueado por observaciones (silencioso)." });
    }

    // 4. üÜï NUEVA L√ìGICA: Marcar STOP autom√°ticamente cuando admin dice el mensaje
    if (ultimoMensajeFueVerificarDatos(historialLimpio)) {
        console.log("üõë Detectado mensaje del ADMIN - Marcando STOP autom√°ticamente para:", from);
        
        // Marcar STOP usando la API existente
        await marcarStopEnWix(from);
        
        // Opcional: enviar mensaje de confirmaci√≥n al usuario antes del bloqueo
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "Gracias por la informaci√≥n. Un asesor revisar√° tu caso y te contactar√° pronto.",
            remitente: "sistema"
        });
        
        return res.json({ success: true, mensaje: "Usuario marcado como STOP autom√°ticamente tras mensaje del admin" });
    }

    // 5. üÜï Detectar contexto de la conversaci√≥n
    const contextoInfo = detectarContextoConversacion(historialLimpio);
    console.log("üéØ Contexto detectado:", contextoInfo);

    // 6. Preparar contexto
    const ultimaCedula = [...historialLimpio].reverse().find(m => esCedula(m.mensaje))?.mensaje || null;

    const contextoConversacion = historialLimpio
        .slice(-25)
        .map(m => `${m.from}: ${m.mensaje}`)
        .join('\n');

    // 7. üÜï Mejorar clasificaci√≥n de intenci√≥n con m√°s contexto
    const promptClasificadorMejorado = `
    Clasifica la intenci√≥n del √∫ltimo mensaje del usuario bas√°ndote en el contexto completo de la conversaci√≥n.
    
    Contexto autom√°tico detectado: ${contextoInfo.contexto}
    √öltima c√©dula en historial: ${ultimaCedula ? "S√ç" : "NO"}
    Ya se consult√≥ informaci√≥n: ${contextoInfo.yaSeConsultoInfo ? "S√ç" : "NO"}
    
    OPCIONES DE RESPUESTA (responde SOLO la etiqueta):
    - confirmar_cita: Usuario quiere consultar informaci√≥n de su cita m√©dica (SOLO si no se consult√≥ antes)
    - solicitar_certificado: Usuario quiere su certificado m√©dico despu√©s de pagar  
    - aprobar_certificado: Usuario confirma/aprueba su certificado (respuestas como "s√≠", "apruebo", "est√° bien", "correcto")
    - correccion_datos: Usuario indica que hay un error en los datos mostrados (palabras como "equivocado", "mal", "error", "debe ser")
    - solicitar_asesor: Usuario quiere hablar con una persona o reportar un problema
    - consulta_general: Preguntas generales sobre servicios, precios, horarios
    - sin_intencion_clara: No se puede determinar la intenci√≥n claramente
    
    REGLAS ESPECIALES:
    - Si ya se consult√≥ informaci√≥n y el usuario dice que est√° mal = correccion_datos
    - Si hay comprobante de pago + c√©dula en historial = solicitar_certificado
    - Si hay confirmaci√≥n de cita + c√©dula = confirmar_cita (SOLO si no se consult√≥ antes)
    - Si el admin pregunt√≥ por aprobaci√≥n = aprobar_certificado
    - Si usuario menciona "asesor", "problema", "error" = solicitar_asesor
    - Si ya se mostr√≥ informaci√≥n y usuario env√≠a solo c√©dula = correccion_datos o solicitar_asesor
    
    Contexto de los √∫ltimos mensajes:
    ${contextoConversacion}
    
    √öltimo mensaje del usuario: "${userMessage}"
    
    Responde √∫nicamente con una de las etiquetas de las opciones.
    `;

    const clasificacion = await fetch("https://api.openai.com/v1/chat/completions", {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.OPENAI_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: promptClasificadorMejorado },
                { role: 'user', content: contextoConversacion }
            ],
            max_tokens: 20
        })
    });

    const resultadoClasificacion = await clasificacion.json();
    const intencion = resultadoClasificacion?.choices?.[0]?.message?.content?.trim() || "sin_intencion_clara";

    console.log("üéØ Intenci√≥n clasificada:", intencion);
    console.log("üéØ Contexto:", contextoInfo.contexto);

    // 8. üÜï MANEJO ESPEC√çFICO POR CONTEXTO E INTENCI√ìN

    // üö® NUEVO: Manejar correcciones de datos
    if (intencion === "correccion_datos" || intencion === "solicitar_asesor" || 
        (contextoInfo.yaSeConsultoInfo && (esCorreccionDeHorario(userMessage) || quiereAsesor(userMessage)))) {
        
        console.log("üîß Usuario reporta error en datos o solicita asesor");
        
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "Entiendo tu preocupaci√≥n. ...transfiriendo con asesor",
            remitente: "sistema"
        });
        
        return res.json({ success: true, mensaje: "Transferido a asesor por correcci√≥n de datos" });
    }

    // üö® NUEVO: Evitar bucle si ya se consult√≥ informaci√≥n
    if (contextoInfo.yaSeConsultoInfo && esCedula(userMessage)) {
        console.log("üîÑ Evitando bucle - ya se consult√≥ informaci√≥n para esta c√©dula");
        
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "Ya consult√© tu informaci√≥n. Si hay alg√∫n error o necesitas ayuda adicional, te transfiero con un asesor. ...transfiriendo con asesor",
            remitente: "sistema"
        });
        
        return res.json({ success: true, mensaje: "Evitado bucle infinito - transferido a asesor" });
    }

    // CONTEXTO: Usuario envi√≥ confirmaci√≥n de cita + c√©dula (SOLO si realmente hubo imagen)
    if (contextoInfo.contexto === "consulta_cita" && ultimaCedula && !contextoInfo.yaSeConsultoInfo) {
        console.log("üìÖ Procesando consulta de cita con c√©dula (imagen confirmada):", ultimaCedula);
      
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "üîç Un momento por favor...",
            remitente: "sistema"
        });

        try {
            const info = await consultarInformacionPaciente(ultimaCedula);
            if (!info || info.length === 0) {
                await enviarMensajeYGuardar({
                    to,
                    userId: from,
                    nombre,
                    texto: "...transfiriendo con asesor",
                    remitente: "sistema"
                });
                return res.json({ success: true });
            } else {
                const datos = info[0];
                const opcionesFecha = {
                    timeZone: "America/Bogota",
                    day: "2-digit",
                    month: "long",
                    year: "numeric",
                    hour: "numeric",
                    minute: "2-digit",
                    hour12: true
                };
                const fechaAtencion = datos.fechaAtencion
                    ? new Date(datos.fechaAtencion).toLocaleString("es-CO", opcionesFecha).replace(',', ' a las')
                    : "No registrada";
                const resumen = `üìÑ Informaci√≥n registrada:\nüë§ ${datos.primerNombre} ${datos.primerApellido}\nüìÖ Fecha consulta: ${fechaAtencion}\nüì≤ Celular: ${datos.celular || "No disponible"}`;
              
                await sendMessage(to, resumen);
               
                await eliminarConversacionDeWix(from);
                console.log("üóëÔ∏è Historial eliminado despu√©s de consultar cita para:", from);
               
                return res.json({ success: true });
            }
        } catch (err) {
            console.error("Error consultando informaci√≥n:", err);
            await enviarMensajeYGuardar({
                to,
                userId: from,
                nombre,
                texto: "...transfiriendo con asesor",
                remitente: "sistema"
            });
            return res.json({ success: true });
        }
    }

    // CONTEXTO: Usuario envi√≥ comprobante de pago + c√©dula 
    if (contextoInfo.contexto === "pago" && ultimaCedula) {
        console.log("üí∞ Procesando generaci√≥n de certificado con c√©dula:", ultimaCedula);
      
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "üîç Un momento por favor...",
            remitente: "sistema"
        });

        try {
            // Verificar si el paciente ya fue atendido antes de generar certificado
            const infoPaciente = await consultarInformacionPaciente(ultimaCedula);
            
            if (infoPaciente && infoPaciente.length > 0) {
                const paciente = infoPaciente[0];
                
                // Si ya est√° atendido, generar certificado directamente
                if (paciente.atendido === "ATENDIDO") {
                    await marcarPagado(ultimaCedula);
                    const pdfUrl = await generarPdfDesdeApi2Pdf(ultimaCedula);
                    await sendPdf(to, pdfUrl, ultimaCedula);
                    await eliminarConversacionDeWix(from);
                    console.log("‚úÖ Certificado generado autom√°ticamente tras pago");
                    return res.json({ success: true });
                } else {
                    // Si no est√° atendido, solo marcar como pagado y transferir
                    await marcarPagado(ultimaCedula);
                    await enviarMensajeYGuardar({
                        to,
                        userId: from,
                        nombre,
                        texto: "Pago registrado correctamente. Un asesor te contactar√° para continuar con el proceso.",
                        remitente: "sistema"
                    });
                    return res.json({ success: true });
                }
            } else {
                // No se encontr√≥ informaci√≥n del paciente
                await enviarMensajeYGuardar({
                    to,
                    userId: from,
                    nombre,
                    texto: "...transfiriendo con asesor",
                    remitente: "sistema"
                });
                return res.json({ success: true });
            }
        } catch (err) {
            console.error("Error generando o enviando PDF:", err);
            await enviarMensajeYGuardar({
                to,
                userId: from,
                nombre,
                texto: "...transfiriendo con asesor",
                remitente: "sistema"
            });
            return res.status(500).json({ success: false });
        }
    }

    // 9. üÜï Manejo mejorado de intenci√≥n: APROBAR CERTIFICADO
    if (intencion === "aprobar_certificado") {
        if (ultimaCedula) {
            try {
                const infoPaciente = await consultarInformacionPaciente(ultimaCedula);
                
                if (infoPaciente && infoPaciente.length > 0) {
                    const paciente = infoPaciente[0];
                    
                    if (paciente.atendido === "ATENDIDO" && (!paciente.pvEstado || paciente.pvEstado === "")) {
                        await marcarPagado(ultimaCedula);
                        const pdfUrl = await generarPdfDesdeApi2Pdf(ultimaCedula);
                        await sendPdf(to, pdfUrl, ultimaCedula);
                        await eliminarConversacionDeWix(from);
                        return res.json({ success: true, mensaje: "Certificado generado tras aprobaci√≥n" });
                    }
                }
            } catch (err) {
                console.error("Error procesando aprobaci√≥n:", err);
            }
        }
        
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "...transfiriendo con asesor",
            remitente: "sistema"
        });
        return res.json({ success: true });
    }

    // 10. Manejo de intenci√≥n: CONFIRMAR CITA (cuando no hay contexto espec√≠fico y NO se consult√≥ antes)
    if (intencion === "confirmar_cita" && !contextoInfo.yaSeConsultoInfo) {
        if (!ultimaCedula) {
            await enviarMensajeYGuardar({
                to,
                userId: from,
                nombre,
                texto: "Por favor ind√≠came tu n√∫mero de documento para poder confirmar tu cita.",
                remitente: "sistema"
            });
            return res.json({ success: true });
        }

        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "üîç Un momento por favor...",
            remitente: "sistema"
        });

        const info = await consultarInformacionPaciente(ultimaCedula);
        if (!info || info.length === 0) {
            await enviarMensajeYGuardar({
                to,
                userId: from,
                nombre,
                texto: "...transfiriendo con asesor",
                remitente: "sistema"
            });
        } else {
            const datos = info[0];
            const opcionesFecha = {
                timeZone: "America/Bogota",
                day: "2-digit",
                month: "long",
                year: "numeric",
                hour: "numeric",
                minute: "2-digit",
                hour12: true
            };
            const fechaAtencion = datos.fechaAtencion
                ? new Date(datos.fechaAtencion).toLocaleString("es-CO", opcionesFecha).replace(',', ' a las')
                : "No registrada";
            const resumen = `üìÑ Informaci√≥n registrada:\nüë§ ${datos.primerNombre} ${datos.primerApellido}\nüìÖ Fecha consulta: ${fechaAtencion}\nüì≤ Celular: ${datos.celular || "No disponible"}`;
            await sendMessage(to, resumen);
           
            await eliminarConversacionDeWix(from);
            console.log("üóëÔ∏è Historial eliminado despu√©s de consultar cita para:", from);
        }

        return res.json({ success: true });
    }

    // 11. Si el usuario solo env√≠a c√©dula sin contexto Y no se ha consultado antes
    if (esCedula(userMessage) && contextoInfo.contexto === "general" && !contextoInfo.yaSeConsultoInfo) {
        await enviarMensajeYGuardar({
            to,
            userId: from,
            nombre,
            texto: "He recibido tu n√∫mero de documento. ¬øNecesitas consultar informaci√≥n sobre tu cita o ya realizaste el pago del examen?",
            remitente: "sistema"
        });
        return res.json({ success: true });
    }

    // 12. Chat normal con OpenAI
    const aiRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.OPENAI_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: promptInstitucional },
                ...historialLimpio.map(m => ({
                    role: m.from === "usuario" ? "user" : "assistant",
                    content: m.mensaje
                })),
                { role: 'user', content: userMessage }
            ],
            max_tokens: 200
        })
    });

    const openaiJson = await aiRes.json();
    const respuestaBot = openaiJson.choices?.[0]?.message?.content || "No se obtuvo respuesta de OpenAI.";
    console.log("üü¢ OpenAI response:", JSON.stringify(openaiJson, null, 2));

    const nuevoHistorial = limpiarDuplicados([
        ...historialLimpio,
        { from: "sistema", mensaje: respuestaBot }
    ]);
    await guardarConversacionEnWix({ userId: from, nombre, mensajes: nuevoHistorial });
    await sendMessage(to, respuestaBot);

    return res.json({ success: true, respuesta: respuestaBot });
}

module.exports = { procesarTexto };